import React, { useState } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, ScrollView } from 'react-native';
import GoBackGeneralHeader from '../../components/GoBackGeneralHeader';
import { useNavigation } from '@react-navigation/native';

const Checklist = () => {
  const navigation = useNavigation();
  const [selectedValues, setSelectedValues] = useState({
    q1: 2,
    q2: 1,
    q3: 0,
    q4: 3,
    q5: 1,
    q6: 0,
    q7: 2,
    q8: 1,
    q9: 2,
    q10: 0,
  });
  const [result, setResult] = useState(null);
  const [allAnswered, setAllAnswered] = useState(true);

  const questions = [
    {
      id: 'q1',
      text: '1. ÏñºÎßàÎÇò ÏûêÏ£º Ïà†ÏùÑ ÎßàÏã≠ÎãàÍπå?',
      options: [
        { label: 'Ï†ÑÌòÄ Ïïà ÎßàÏã¨', value: 0 },
        { label: 'Ïõî 1Ìöå ÎØ∏Îßå', value: 1 },
        { label: 'Ïõî 2~4Ìöå', value: 2 },
        { label: 'Ï£º 2~3Ìöå', value: 3 },
        { label: 'Ï£º 4Ìöå', value: 4 },
      ],
    },
    {
      id: 'q2',
      text: '2. Ïà†ÏùÑ ÎßàÏãúÎäî ÎÇ†ÏùÄ ÌïúÎ≤àÏóê Î™á Ïûî Ï†ïÎèÑ ÎßàÏã≠ÎãàÍπå?',
      subtext: '(ÏÜåÏ£º, Îß•Ï£º Îì± Ïà†Ïùò Ï¢ÖÎ•òÏóê ÏÉÅÍ¥ÄÏóÜÏù¥ Í∞ÅÍ∞ÅÏùò ÏûîÏàòÎ°ú Í≥ÑÏÇ∞)',
      options: [
        { label: '1~2Ïûî', value: 0 },
        { label: '3~4Ïûî', value: 1 },
        { label: '5~6Ïûî', value: 2 },
        { label: '7~9Ïûî', value: 3 },
        { label: '10Ïûî Ïù¥ÏÉÅ', value: 4 },
      ],
    },
    {
      id: 'q3',
      text: '3. Ìïú Î≤àÏùò Ï¢åÏÑùÏóêÏÑú ÏÜåÏ£º Ìïú Î≥ë ÎòêÎäî Îß•Ï£º 4Î≥ë Ïù¥ÏÉÅ ÎßàÏãúÎäî Í≤ΩÏö∞Îäî ÏñºÎßàÎÇò ÏûêÏ£º ÏûàÏäµÎãàÍπå?',
      options: [
        { label: 'ÏóÜÏùå', value: 0 },
        { label: 'Ïõî 1Ìöå ÎØ∏Îßå', value: 1 },
        { label: 'Ïõî 1Ìöå', value: 2 },
        { label: 'Ï£º 1Ìöå', value: 3 },
        { label: 'Í±∞Ïùò Îß§Ïùº', value: 4 },
      ],
    },
    {
      id: 'q4',
      text: '4. ÏßÄÎÇú 1ÎÖÑÍ∞Ñ Ìïú Î≤à Ïà†ÏùÑ ÎßàÏãúÍ∏∞ ÏãúÏûëÌïòÎ©¥ Î©àÏ∂ú Ïàò ÏóÜÏóàÎçò ÎïåÍ∞Ä ÏñºÎßàÎÇò ÏûêÏ£º ÏûàÏóàÏäµÎãàÍπå?',
      options: [
        { label: 'ÏóÜÏùå', value: 0 },
        { label: 'Ïõî 1Ìöå ÎØ∏Îßå', value: 1 },
        { label: 'Ïõî 1Ìöå', value: 2 },
        { label: 'Ï£º 1Ìöå', value: 3 },
        { label: 'Í±∞Ïùò Îß§Ïùº', value: 4 },
      ],
    },
    {
      id: 'q5',
      text: '5. ÏßÄÎÇú 1ÎÖÑÍ∞Ñ ÌèâÏÜå Í∞ôÏïòÏúºÎ©¥ Ìï† Ïàò ÏûàÏóàÎçò ÏùºÏùÑ ÏùåÏ£º ÎïåÎ¨∏Ïóê Ïã§Ìå®Ìïú Ï†ÅÏù¥ ÏñºÎßàÎÇò ÏûêÏ£º ÏûàÏóàÏäµÎãàÍπå?',
      options: [
        { label: 'ÏóÜÏùå', value: 0 },
        { label: 'Ïõî 1Ìöå ÎØ∏Îßå', value: 1 },
        { label: 'Ïõî 1Ìöå', value: 2 },
        { label: 'Ï£º 1Ìöå', value: 3 },
        { label: 'Í±∞Ïùò Îß§Ïùº', value: 4 },
      ],
    },
    {
      id: 'q6',
      text: '6. ÏßÄÎÇú 1ÎÖÑÍ∞Ñ Ïà†ÏùÑ ÎßàÏã† Îã§Ïùå ÎÇ† ÏùºÏñ¥ÎÇòÍ∏∞ ÏúÑÌï¥ Ìï¥Ïû•Ïà†Ïù¥ ÌïÑÏöîÌñàÎçò Ï†ÅÏùÄ ÏñºÎßàÎÇò ÏûêÏ£º ÏûàÏóàÏäµÎãàÍπå?',
      options: [
        { label: 'ÏóÜÏùå', value: 0 },
        { label: 'Ïõî 1Ìöå ÎØ∏Îßå', value: 1 },
        { label: 'Ïõî 1Ìöå', value: 2 },
        { label: 'Ï£º 1Ìöå', value: 3 },
        { label: 'Í±∞Ïùò Îß§Ïùº', value: 4 },
      ],
    },
    {
      id: 'q7',
      text: '7. ÏßÄÎÇú 1ÎÖÑÍ∞Ñ ÏùåÏ£º ÌõÑÏóê Ï£ÑÏ±ÖÍ∞êÏù¥ Îì† Ï†ÅÏù¥ ÏñºÎßàÎÇò ÏûêÏ£º ÏûàÏóàÏäµÎãàÍπå?',
      options: [
        { label: 'ÏóÜÏùå', value: 0 },
        { label: 'Ïõî 1Ìöå ÎØ∏Îßå', value: 1 },
        { label: 'Ïõî 1Ìöå', value: 2 },
        { label: 'Ï£º 1Ìöå', value: 3 },
        { label: 'Í±∞Ïùò Îß§Ïùº', value: 4 },
      ],
    },
    {
      id: 'q8',
      text: '8. ÏßÄÎÇú 1ÎÖÑÍ∞Ñ ÏùåÏ£º ÎïåÎ¨∏Ïóê Ï†ÑÎÇ† Î∞§Ïóê ÏûàÏóàÎçò ÏùºÏù¥ Í∏∞ÏñµÎÇòÏßÄ ÏïäÏïòÎçò Ï†ÅÏù¥ ÏñºÎßàÎÇò ÏûêÏ£º ÏûàÏóàÏäµÎãàÍπå?',
      options: [
        { label: 'ÏóÜÏùå', value: 0 },
        { label: 'Ïõî 1Ìöå ÎØ∏Îßå', value: 1 },
        { label: 'Ïõî 1Ìöå', value: 2 },
        { label: 'Ï£º 1Ìöå', value: 3 },
        { label: 'Í±∞Ïùò Îß§Ïùº', value: 4 },
      ],
    },
    {
      id: 'q9',
      text: '9. ÏùåÏ£ºÎ°ú Ïù∏Ìï¥ ÏûêÏã†Ïù¥ÎÇò Îã§Î•∏ ÏÇ¨ÎûåÏù¥ Îã§Ïπú Ï†ÅÏù¥ ÏûàÏóàÏäµÎãàÍπå?',
      options: [
        { label: 'ÏóÜÏùå', value: 0 },
        { label: 'ÏûàÏßÄÎßå ÏßÄÎÇú 1ÎÖÑÍ∞ÑÏùÄ ÏóÜÏóàÎã§.', value: 2 },
        { label: 'ÏßÄÎÇú 1ÎÖÑÍ∞Ñ ÏûàÏóàÎã§.', value: 4 },
      ],
    },
    {
      id: 'q10',
      text: '10. ÏπúÏ≤ôÏù¥ÎÇò ÏπúÍµ¨, ÏùòÏÇ¨Í∞Ä ÎãπÏã†Ïù¥ Ïà†ÏùÑ ÎßàÏãúÎäî Í≤ÉÏùÑ Í±±Ï†ïÌïòÍ±∞ÎÇò ÎãπÏã†ÏóêÍ≤å Ïà† ÎÅäÍ∏∞Î•º Í∂åÏú†ÌïòÎäî Ï†ÅÏù¥ ÏûàÏóàÏäµÎãàÍπå?',
      options: [
        { label: 'ÏóÜÏùå', value: 0 },
        { label: 'ÏûàÏßÄÎßå ÏßÄÎÇú 1ÎÖÑÍ∞ÑÏùÄ ÏóÜÏóàÎã§.', value: 2 },
        { label: 'ÏßÄÎÇú 1ÎÖÑÍ∞Ñ ÏûàÏóàÎã§.', value: 4 },
      ],
    },
  ];

  const checkOnlyOne = (questionId, optionValue) => {
    setSelectedValues({ ...selectedValues, [questionId]: optionValue });
  };

  const calculateResult = () => {
    if (Object.keys(selectedValues).length < questions.length) {
      setAllAnswered(false);
      return;
    }
    setAllAnswered(true);
    const total = Object.values(selectedValues).reduce((acc, value) => acc + value, 0);
    setResult(total);
  };

  return (
    <View style={styles.container}>
      <GoBackGeneralHeader />
      <ScrollView contentContainerStyle={styles.scrollViewContent}>
        <Text style={styles.title}>Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ History</Text>
        {questions.map((question) => (
          <View key={question.id} style={styles.question}>
            <Text style={styles.questionText}>{question.text}</Text>
            {question.subtext && <Text style={styles.subtext}>{question.subtext}</Text>}
            {question.options.map((option, index) => (
              <TouchableOpacity
                key={index}
                style={styles.option}
                onPress={() => checkOnlyOne(question.id, option.value)}
              >
                <View style={styles.checkboxContainer}>
                  <View
                    style={[
                      styles.checkbox,
                      selectedValues[question.id] === option.value && styles.checkboxSelected,
                    ]}
                  >
                    {selectedValues[question.id] === option.value && <View style={styles.checkmark} />}
                  </View>
                  <Text style={styles.optionText}>{option.label}</Text>
                </View>
              </TouchableOpacity>
            ))}
          </View>
        ))}
          <View style={styles.resultContainer}>
            <Text style={styles.resultTitle}>üìñ Ìï¥ÏÑùÍ≤∞Í≥º</Text>
            <Text style={styles.resultText}>ÏÇ¨Ïö©ÏûêÎãòÏùÄ</Text>
            <Text style={styles.resultHighlight}>
              {result < 10 ? 'Ï†ïÏÉÅ ÏùåÏ£ºÍµ∞' : result < 20 ? 'ÏúÑÌóò ÏùåÏ£ºÍµ∞' : 'ÏïåÏΩîÏò¨ ÏÇ¨Ïö© Ïû•Ïï† Ï∂îÏ†ïÍµ∞'}Ïóê ÏÜçÌï¥Ïöî!
            </Text>
            <Text style={styles.resultSubtext}>
              Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù Í≤∞Í≥º, ÏïåÏΩîÏò¨ Ï§ëÎèÖÏù¥ ÏùòÏã¨ÎêòÎäî Îã§Î•∏ ÏÇ¨Ïö©ÏûêÎì§Î≥¥Îã§{" "}
              {result >= 30 ? 'ÎÜíÏäµÎãàÎã§' : 'ÎÇÆÏäµÎãàÎã§'}.
            </Text>
          </View>
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  scrollViewContent: {
    paddingHorizontal: 20,
    paddingBottom: 30,
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 20,
    marginTop: 20,
  },
  question: {
    marginBottom: 20,
  },
  questionText: {
    fontSize: 17,
    fontWeight: '500',
    marginBottom: 10,
  },
  subtext: {
    fontSize: 13,
    color: '#6E6E6E',
    marginBottom: 10,
  },
  option: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 10,
  },
  checkboxContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  checkbox: {
    width: 20,
    height: 20,
    borderRadius: 3,
    borderWidth: 1,
    borderColor: '#BDBDBD',
    marginRight: 10,
    alignItems: 'center',
    justifyContent: 'center',
  },
  checkboxSelected: {
    backgroundColor: '#84A2BB',
    borderColor: '#84A2BB',
  },
  checkmark: {
    width: 10,
    height: 10,
    backgroundColor: 'white',
    borderRadius: 1,
  },
  optionText: {
    fontSize: 16,
  },
  button: {
    backgroundColor: '#84A2BB',
    borderRadius: 30,
    alignItems: 'center',
    justifyContent: 'center',
    height: 50,
    marginVertical: 20,
  },
  buttonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
  },
  warningText: {
    color: '#84A2BB',
    textAlign: 'center',
    marginBottom: 20,
  },
  resultContainer: {
    alignItems: 'center',
    marginTop: 30,
    marginBottom:60
  },
  resultTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  resultText: {
    fontSize: 16,
    marginBottom: 5,
  },
  resultHighlight: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#84A2BB',
    marginBottom: 10,
  },
  resultSubtext: {
    fontSize: 14,
    textAlign: 'center',
    marginHorizontal: 30,
    color: '#6E6E6E',
  },
});

export default Checklist;
